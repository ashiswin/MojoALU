module adder (
    input alufn[6],
    input op1[8],
    input op2[8],
    output out[8],
    output zOut,
    output vOut,
    output nOut
  ) {
  
  sig zComp;
  sig result[8];
  var i;
  
  sig shift[4];
  sig amant[4];
  sig bmant[4];
  sig aexp[4];
  sig bexp[4];
  sig fresult[5];
  sig o1[8];
  sig o2[8];
  sig fmulres[8];
  sig fmulexp[4];
  sig fmulshift[4];
  
  always {
    zOut = 0;
    vOut = 0;
    nOut = 0;
    out = 8h00;
    
    case(alufn) {
      Inst.ADD:
        result = op1 + op2;
        out = result;
        nOut = result[7];
        vOut = (op1[7] & op2[7] & ~result[7]) | (~op1[7] & ~op2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) {
          zComp = (zComp | result[i]);
        }
        zOut = ~zComp;
      Inst.SUB:
        result = op1 - op2;
        out = result;
        nOut = result[7];
        vOut = (op1[7] & op2[7] & ~result[7]) | (~op1[7] & ~op2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) {
          zComp = (zComp | result[i]);
        }
        zOut = ~zComp;
      Inst.MUL:
        out = op1 * op2;
      //Inst.DIV:
        //TODO
      Inst.NEG:
        out = -op1;
      Inst.ABS:
        out = (-op1 & 8x{op1[7]}) | (op1 & 8x{~op1[7]});
      Inst.FADD:
        if(op1[6:3] > op2[6:3]) {
          o1 = op1;
          o2 = op2;
        }
        else {
          o1 = op2;
          o2 = op1;
        }
        shift = o1[6:3] - o2[6:3];
        amant[3] = 1;
        amant[2:0] = o1[2:0];
        
        bmant[3] = 1;
        bmant[2:0] = o2[2:0];
        
        bmant = bmant >> shift;
        
        fresult = amant + bmant;
        if(fresult[4] == 1) {
          out[6:3] = o1[6:3] + 1;
          fresult = fresult >> 1;
        }
        else {
          out[6:3] = o1[6:3];
        }
        
        out[2:0] = fresult[2:0];
      Inst.FMUL:
        amant[3] = 1;
        bmant[3] = 1;
        
        amant[2:0] = op1[2:0];
        bmant[2:0] = op2[2:0];
        
        aexp = op1[6:3] - 10;
        bexp = op2[6:3] - 10;
        
        fmulres = amant * bmant;
        
        fmulexp = aexp + bexp;
        
        fmulshift[0] = (~fmulres[7] & fmulres[6]) | (~fmulres[7] & ~fmulres[5] & fmulres[4]) | (~fmulres[7] & ~fmulres[5] & ~fmulres[3] & fmulres[2]) | (~fmulres[7] & ~fmulres[5] & ~fmulres[3] & ~fmulres[1] & fmulres[0]);
        fmulshift[1] = (~fmulres[7] & fmulres[5]) | (~fmulres[7] & fmulres[6]) | (~fmulres[7] & ~fmulres[4] & ~fmulres[3] & fmulres[1]) | (~fmulres[7] & ~fmulres[4] & ~fmulres[3] & fmulres[2]);
        fmulshift[2] = (~fmulres[7] & fmulres[3]) | (~fmulres[7] & fmulres[4]) | (~fmulres[7] & fmulres[5]) | (~fmulres[7] & fmulres[6]);
        fmulshift[3] = fmulres[7];
        
        fmulexp = fmulexp + fmulshift - 1;
        
        out[7] = op1[7] ^ op2[7];
        out[6:3] = fmulexp + 7;
        if(fmulshift > 4) {
          fmulres = fmulres >> (fmulshift - 4);
        }
        else {
          fmulres = fmulres << (4 - fmulshift);
        }
        out[2:0] = fmulres[2:0];
      Inst.ITOF:
        out[7] = op1[7];
        
        if(op1[7] == 1) {
          fmulres = -op1;
        }
        else {
          fmulres = op1;
        }
        
        fmulshift[0] = (~fmulres[7] & fmulres[6]) | (~fmulres[7] & ~fmulres[5] & fmulres[4]) | (~fmulres[7] & ~fmulres[5] & ~fmulres[3] & fmulres[2]) | (~fmulres[7] & ~fmulres[5] & ~fmulres[3] & ~fmulres[1] & fmulres[0]);
        fmulshift[1] = (~fmulres[7] & fmulres[5]) | (~fmulres[7] & fmulres[6]) | (~fmulres[7] & ~fmulres[4] & ~fmulres[3] & fmulres[1]) | (~fmulres[7] & ~fmulres[4] & ~fmulres[3] & fmulres[2]);
        fmulshift[2] = (~fmulres[7] & fmulres[3]) | (~fmulres[7] & fmulres[4]) | (~fmulres[7] & fmulres[5]) | (~fmulres[7] & fmulres[6]);
        fmulshift[3] = fmulres[7];
        
        if(fmulshift > 4) {
          fmulres = fmulres >> (fmulshift - 4);
        }
        else {
          fmulres = fmulres << (4 - fmulshift);
        }
        
        fmulexp = fmulshift - 1;
        out[6:3] = fmulexp + 7;
        out[2:0] = fmulres[2:0];
      Inst.FTOI:
        fmulexp = op1[6:3] - 7;
        amant[3] = 1;
        amant[2:0] = op1[2:0];
        
        if(fmulexp > 0) {
          if(fmulexp > 3) {
            fmulres = amant << fmulexp - 3;
          }
          else {
            fmulres = amant >> 3 - fmulexp;
          }
        }
        if(op1[7] == 1) {
          fmulres = -fmulres;
        }
        
        out = fmulres;
    }
  }
}
