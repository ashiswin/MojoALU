module adder (
    input clk,  // clock
    input rst,  // reset
    input alufn[6],
    input op1[8],
    input op2[8],
    output out[8],
    output zOut,
    output vOut,
    output nOut
  ) {
  
  sig zComp;
  sig result[8];
  var i;
  
  always {
    zOut = 0;
    vOut = 0;
    nOut = 0;
    out = 8hxx;
    case(alufn) {
      Inst.ADD:
        result = op1 + op2;
        out = result;
        nOut = result[7];
        vOut = (op1[7] & op2[7] & ~result[7]) | (~op1[7] & ~op2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) {
          zComp = ~(zComp | result[i]);
        }
        zOut = zComp;
      Inst.SUB:
        result = op1 - op2;
        out = result;
        nOut = result[7];
        vOut = (op1[7] & op2[7] & ~result[7]) | (~op1[7] & ~op2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) {
          zComp = ~(zComp | result[i]);
        }
        zOut = zComp;
      Inst.MUL:
        out = op1 * op2;
      //Inst.DIV:
        //TODO
      Inst.NEG:
        out = -op1;
    }
  }
}
